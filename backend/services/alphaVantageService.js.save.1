// backend/services/alphaVantageService.js
const axios = require('axios');
const logger = require('../utils/logger');

const API_KEY = process.env.ALPHA_VANTAGE_API_KEY;
const BASE_URL = 'https://www.alphavantage.co/query';

// Cache para reducir llamadas
const cache = new Map();
const CACHE_DURATION = 30000; // 30 segundos

// FUNCIONES PRINCIPALES

async function getQuote(symbol) {
  try {
    // Verificar cache
    const cached = cache.get(`quote_${symbol}`);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      return cached.data;
    }

    const url = `${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;
    const response = await axios.get(url);
    
    if (response.data['Error Message']) {
      throw new Error(`Símbolo inválido: ${symbol}`);
    }
    
    if (response.data['Note']) {
      throw new Error('Límite de API alcanzado');
    }
    
    const quote = response.data['Global Quote'];
    const normalized = {
      symbol: quote['01. symbol'],
      price: parseFloat(quote['05. price']),
      open: parseFloat(quote['02. open']),
      high: parseFloat(quote['03. high']),
      low: parseFloat(quote['04. low']),
      close: parseFloat(quote['05. price']),
      volume: parseInt(quote['06. volume']),
      change: parseFloat(quote['09. change']),
      changePercent: quote['10. change percent'].replace('%', ''),
      previousClose: parseFloat(quote['08. previous close']),
      timestamp: new Date().toISOString()
    };
    
    // Guardar en cache
    cache.set(`quote_${symbol}`, { data: normalized, timestamp: Date.now() });
    
    return normalized;
  } catch (error) {
    logger.error(`[Alpha Vantage] Error obteniendo cotización ${symbol}:`, error.message);
    throw error;
  }
}

async function getFundamentals(symbol) {
  try {
    const cached = cache.get(`fundamentals_${symbol}`);
    if (cached && Date.now() - cached.timestamp < 3600000) { // 1 hora cache
      return cached.data;
    }

    const url = `${BASE_URL}?function=OVERVIEW&symbol=${symbol}&apikey=${API_KEY}`;
    const response = await axios.get(url);
    
    if (response.data['Error Message']) {
      throw new Error(`Símbolo inválido: ${symbol}`);
    }
    
    const data = response.data;
    const normalized = {
      name: data.Name,
      marketCap: data.MarketCapitalization,
      marketCapRaw: parseInt(data.MarketCapitalization),
      peRatio: parseFloat(data.PERatio) || null,
      eps: parseFloat(data.EPS),
      profitMargin: (parseFloat(data.ProfitMargin) * 100).toFixed(2) + '%',
      returnOnEquity: (parseFloat(data.ReturnOnEquityTTM) * 100).toFixed(2) + '%',
      dividendYield: (parseFloat(data.DividendYield) * 100).toFixed(2) + '%',
      bookValue: parseFloat(data.BookValue),
      priceToBook: parseFloat(data.PriceToBookRatio),
      beta: parseFloat(data.Beta),
      week52High: parseFloat(data['52WeekHigh']),
      week52Low: parseFloat(data['52WeekLow']),
      debtToEquity: parseFloat(data.DebtToEquity) || null
    };
    
    cache.set(`fundamentals_${symbol}`, { data: normalized, timestamp: Date.now() });
    
    return normalized;
  } catch (error) {
    logger.error(`[Alpha Vantage] Error obteniendo fundamentals ${symbol}:`, error.message);
    throw error;
  }
}

async function getHistoricalData(symbol, days = 100) {
  try {
    const outputsize = days > 100 ? 'full' : 'compact';
    const url = `${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${symbol}&outputsize=${outputsize}&apikey=${API_KEY}`;
    const response = await axios.get(url);
    
    const timeSeries = response.data['Time Series (Daily)'];
    if (!timeSeries) {
      throw new Error('No hay datos históricos disponibles');
    }
    
    const dates = Object.keys(timeSeries).slice(0, days);
    return dates.map(date => ({
      date,
      open: parseFloat(timeSeries[date]['1. open']),
      high: parseFloat(timeSeries[date]['2. high']),
      low: parseFloat(timeSeries[date]['3. low']),
      close: parseFloat(timeSeries[date]['4. close']),
      volume: parseInt(timeSeries[date]['5. volume'])
    })).reverse();
  } catch (error) {
    logger.error(`[Alpha Vantage] Error obteniendo históricos ${symbol}:`, error.message);
    throw error;
  }
}

// Para tus 25 tickers - actualización inteligente
async function getBatchQuotes(symbols) {
  try {
    const results = [];
    
    // Obtener de cache primero
    for (const symbol of symbols) {
      const cached = cache.get(`quote_${symbol}`);
      if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        results.push(cached.data);
      } else {
        // Solo pedir los que no están en cache
        try {
          const quote = await getQuote(symbol);
          results.push(quote);
          // Pequeña pausa para no saturar
          await new Promise(resolve => setTimeout(resolve, 200));
        } catch (err) {
          logger.error(`Error en batch para ${symbol}:`, err.message);
        }
      }
    }
    
    return results;
  } catch (error) {
    logger.error('[Alpha Vantage] Error en batch quotes:', error);
    throw error;
  }
}

// Placeholders para mantener compatibilidad
async function getRSI(symbol) {
  // TODO: Implementar si necesario
  return { rsi: 50 };
}

async function getMACD(symbol) {
  // TODO: Implementar si necesario
  return { macd: 0 };
}

module.exports = {
  getQuote,
  getFundamentals,
  getHistoricalData,
  getBatchQuotes,
  getRSI,
  getMACD
};
